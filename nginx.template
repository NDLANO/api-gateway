pid pids/nginx.pid; # this setting is mandatory
worker_processes ${{NGINX_WORKER_PROCESSES}}; # can be set by kong.conf
daemon ${{NGINX_DAEMON}};                     # can be set by kong.conf

lmdb_environment_path dbless.lmdb;
lmdb_map_size         128m;

error_log logs/error.log ${{LOG_LEVEL}}; # can be set by kong.conf
env NDLA_ENVIRONMENT;
env IMAGE_FILE_S3_BUCKET;
env AUDIO_FILE_S3_BUCKET;
env ARTICLE_ATTACHMENT_S3_BUCKET;

events {
    worker_connections ${{NGINX_EVENTS_WORKER_CONNECTIONS}};
}

http {
    # include cache definitions used in the server blocks below
    include '/nginx-caches.conf';

    # include default Kong Nginx config
    include 'nginx-kong.conf';

    # Changes based on whether running on kubernetes or plain docker
    include '/nginx-resolver.conf';

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/json;
    gzip_disable msie6;

    map $arg_download $files_content_disposition {
        default "";
        ""      "";
        ~.+     "attachment; filename=\"$arg_download\"";
    }

    server {
        listen 8080;
        server_name apicache;

        location / {
            proxy_cache_valid 200 302 301  5m;
            proxy_cache_valid 404         30s;

            include '/nginx-api-cache.conf';
        }
    }

    server {
        listen 8081;
        server_name apicachelong;

        location / {
            proxy_cache_valid 200 302 301  15m;
            proxy_cache_valid 404          30s;

            include '/nginx-api-cache.conf';
        }
    }


    server {
        server_name *.ndla.no;
        listen 79;
        return 301 https://$host$request_uri;
    }

    server {
        server_name *.ndla.no api-gateway.ndla-local;
        listen 80;
        charset UTF-8;

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        set $api_gateway       '127.0.0.1:8000';

        location ~* ^/audio/files/(.*) {
          set_by_lua_block $s3_bucket {
          local bucket_name = os.getenv("AUDIO_FILE_S3_BUCKET")
            if bucket_name then
              return bucket_name .. ".s3.amazonaws.com"
            else
              return os.getenv("NDLA_ENVIRONMENT") .. ".audio.ndla.s3.amazonaws.com"
            end
          }

          set $url_image        '$1';

          proxy_set_header       Referer    'ndla_proxy';
          proxy_pass             https://$s3_bucket/$url_image;
        }

        location ~* ^/image-api/raw/id/(.*) {
          proxy_set_header  Host $http_host;
          proxy_set_header  X-Real-IP $remote_addr;
          proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header  X-Forwarded-Host $http_host;
          proxy_set_header  Forwarded "for=$remote_addr;proto=$http_x_forwarded_proto";
          proxy_set_header  X-Forwarded-Prefix /$1;
          proxy_pass http://$api_gateway;

          proxy_cache image_cache;
          proxy_cache_key "$proxy_host$uri$is_args$args";
          proxy_cache_valid 30d;
          proxy_cache_lock on;
          proxy_cache_use_stale error invalid_header timeout updating;
          proxy_http_version 1.1;
          expires 30d;
        }

        location ~* ^/image-api/raw/(.*) {
          set $image_name '$1';
          rewrite_by_lua_block {
            if ngx.var.arg_download == "true" then
              ngx.header['Content-Disposition'] = "attachment"
            end

            if ngx.var.args then
              return ngx.exec("/raw-image/image-api/raw/" .. ngx.var.image_name, ngx.var.args)
            end
          }

          set_by_lua_block $s3_bucket {
          local bucket_name = os.getenv("IMAGE_FILE_S3_BUCKET")
            if bucket_name then
              return bucket_name .. ".s3.amazonaws.com"
            else
              return os.getenv("NDLA_ENVIRONMENT") .. ".images.ndla.s3.amazonaws.com"
            end
          }

          add_header "Access-Control-Allow-Origin" '*';
          add_header "Access-Control-Allow-Methods" "GET, OPTIONS, HEAD";

          set $url_image 'https://$s3_bucket/$image_name';

          proxy_set_header       Referer    'ndla_proxy';
          proxy_pass             $url_image;
        }

        location ~* ^/raw-image/(.*) {
          internal;
          proxy_set_header  Host $http_host;
          proxy_set_header  X-Real-IP $remote_addr;
          proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header  X-Forwarded-Host $http_host;
          proxy_set_header  Forwarded "for=$remote_addr;proto=$http_x_forwarded_proto";
          proxy_set_header  X-Forwarded-Prefix /$1;

          proxy_pass http://$api_gateway$request_uri;

          proxy_cache image_cache;
          proxy_cache_key "$proxy_host$uri$is_args$args";
          proxy_cache_valid 30d;
          proxy_cache_lock on;
          proxy_cache_use_stale error invalid_header timeout updating;
          proxy_http_version 1.1;
          expires 30d;
        }

        location ~* ^/files/(.*) {
          set_by_lua_block $s3_bucket {
            local bucket_name = os.getenv("ARTICLE_ATTACHMENT_S3_BUCKET")
            if bucket_name then
              return bucket_name .. ".s3.amazonaws.com"
            else
              return os.getenv("NDLA_ENVIRONMENT") .. ".article-attachments.ndla.s3.amazonaws.com"
            end
          }

          add_header Content-Disposition $files_content_disposition;

          set $url_file         '$1';

          proxy_set_header       Referer    'ndla_proxy';
          proxy_pass             https://$s3_bucket/$url_file;
        }

        location ~* ^/robots.txt {
          if ($http_host = "api.ndla.no") {
            return 200 'User-agent: *\nDisallow: /*/\n';
          }

          if ($http_host != "api.ndla.no") {
            return 200 'User-agent: *\nDisallow: /\n';
          }
        }

        location ~* ^/([^/]*) {
          proxy_set_header  Host $http_host;
          proxy_set_header  X-Real-IP $remote_addr;
          proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header  X-Forwarded-Proto $http_x_forwarded_proto;
          proxy_set_header  X-Forwarded-Host $http_host;
          proxy_set_header  Forwarded "for=$remote_addr;proto=$http_x_forwarded_proto";
          proxy_set_header  X-Forwarded-Prefix /$1;
          proxy_pass http://$api_gateway;
        }
    }
}
